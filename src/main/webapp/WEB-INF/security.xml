<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    		xmlns:security="http://www.springframework.org/schema/security"
 				xmlns:p="http://www.springframework.org/schema/p"
 				xsi:schemaLocation="http://www.springframework.org/schema/beans 
      											http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
												    http://www.springframework.org/schema/security 
												    http://www.springframework.org/schema/security/spring-security-3.2.xsd">
  	<import resource="dao.xml"/>
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="false" use-expressions="true" entry-point-ref="authenticationEntryPoint">   	 	
		<security:custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
		<security:custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER"/>
		<security:custom-filter ref="rememberMeFilter" position="REMEMBER_ME_FILTER"/>
	 	<security:custom-filter ref="logoutFilter" position="LOGOUT_FILTER"/>
		<security:session-management session-authentication-strategy-ref="sas"/>
	   	<security:intercept-url pattern="/" 						access="permitAll" />
	   	<security:intercept-url pattern="/promotion/**" 				access="hasRole('ROLE_SUPER_MANAGER')" />
	   	<security:intercept-url pattern="/promotionSignin" 			access="hasRole('ROLE_SUPER_MANAGER')" />
	    <security:intercept-url pattern="/resources/**" 			access="permitAll" />
	  	<security:intercept-url pattern="/js/**" 					access="permitAll" />
		<security:intercept-url pattern="/css/**" 					access="permitAll" />
	  	<security:intercept-url pattern="/images/**" 				access="permitAll" />
	   	<security:intercept-url pattern="/assets/**" 				access="permitAll" />
	   	<security:intercept-url pattern="/signinFailed" 			access="permitAll" />
	   	<security:intercept-url pattern="/journals/*" 				access="permitAll" />
	   	<security:intercept-url pattern="/journals/*/journalSignup" access="permitAll" />
	   	   	
	   	<security:intercept-url pattern="/signinSuccess" 			access="hasRole('ROLE_USER')" />
	   	<security:intercept-url pattern="/signout"					access="hasRole('ROLE_USER')" />
	   	<security:intercept-url pattern="/activity/**"				access="hasRole('ROLE_USER')" />
	   	<security:intercept-url pattern="/account/**"				access="hasRole('ROLE_USER')" />
	   	<security:intercept-url pattern="/journals/*/reviewInvitation/**" 	access="permitAll" />
	   	<security:intercept-url pattern="/journals/*/**" 			access="hasRole('ROLE_MEMBER')" />
	   	
	   	<!--  <security:intercept-url pattern="/superManager/**" 	access="hasRole('ROLE_USER') and authentication.name == 'yh21.han@gmail.com'" /> -->	   	
	   	<security:intercept-url pattern="/superManager/**" 			access="hasRole('ROLE_SUPER_MANAGER')" />
	   	
	</security:http>
		
	<bean id="logoutFilter" 
				class="org.springframework.security.web.authentication.logout.LogoutFilter"
				p:filterProcessesUrl="/signout">
		<constructor-arg ref="customLogoutHandler" /> 
		<constructor-arg>
			<list>
				<ref bean="rememberMeServices" />
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
	</bean>
	
	<bean id="customLogoutHandler"
				class="link.thinkonweb.util.CustomLogoutHandler"/>
	
 	<bean id="rememberMeFilter" 
 				class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter"
				p:rememberMeServices-ref="rememberMeServices"
				p:authenticationManager-ref="authenticationManager" />
	
	<!-- Defines which remember me implementation to use - in this case using a database table to log 'remembered' tokens --> 
	<bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices"> 
	    <property name="tokenRepository" ref="jdbcTokenRepository" /> 
	    <property name="userDetailsService" ref="userDetailsService" />
	    <property name="key" value="TojCoDreikjiutDijIcDegrehysVaibkiph!" /> 
	    <property name="alwaysRemember" value="false" /> 
	    <property name="cookieName" value="remember-me"/>
    	<property name="tokenLength" value="32"/>
    	<property name="tokenValiditySeconds" value="60"/> <!-- 1 week -->
	</bean> 
	 
	<!-- Uses a database table to maintain a set of persistent login data --> 
	<bean id="jdbcTokenRepository" class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl"> 
	    <property name="createTableOnStartup" value="false" /> 
	    <property name="dataSource" ref="dataSource" /> 
	</bean> 
	
	<bean id="rememberMeAuthenticationProvider" 
				class="org.springframework.security.authentication.RememberMeAuthenticationProvider"
				p:key="TojCoDreikjiutDijIcDegrehysVaibkiph!" />

<!--	<bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"-->
 	
 	<bean id="authenticationFilter" class="link.thinkonweb.controller.security.CustomUsernamePasswordAuthenticationFilter"
		    p:sessionAuthenticationStrategy-ref="sas"
		    p:authenticationManager-ref="authenticationManager"
		   	p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
		   	p:rememberMeServices-ref="rememberMeServices"
		   	p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler"/>

  <!-- We just actually need to set the default target url here -->
 	<bean id="customAuthenticationSuccessHandler" 
 			 	class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
  		 	p:defaultTargetUrl="/signinSuccess" />
  		 
 	<!-- We just actually need to set the default failure url here -->
 	<bean id="customAuthenticationFailureHandler" 
 			 	class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
  		 	p:defaultFailureUrl="/signinFailed" />
   
	<!-- The AuthenticationEntryPoint is responsible for redirecting the user to a particular page, like a login page,
  		 whenever the server sends back a response requiring authentication -->
	<!-- See Spring-Security Reference 5.4.1 for more info -->
	<bean id="authenticationEntryPoint" 
				class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
	 			p:loginFormUrl="/"/>
   
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<!-- It's important to set the alias here because it's used by the authenticationFilter -->	
	<security:authentication-manager alias="authenticationManager">
  	<security:authentication-provider>
		<security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="SELECT USERNAME, PASSWORD, ENABLED FROM USERS WHERE USERNAME = ?" 
				authorities-by-username-query="SELECT U.USERNAME, A.ROLE FROM USERS U, AUTHORITIES A WHERE U.ID = A.USER_ID AND U.USERNAME = ?" />
		<security:password-encoder hash="sha-256">
  			<security:salt-source user-property="username" />
  		</security:password-encoder>
  		<!--  <security:password-encoder ref="passwordEncoder"/>-->			
   	</security:authentication-provider>
  	<security:authentication-provider ref="rememberMeAuthenticationProvider" />
	</security:authentication-manager>
	
	<bean id="userDetailsService"
      	class="link.thinkonweb.service.user.UserServiceImpl">
	</bean>

  
  <bean id="daoAuthenticationProvider"
  			class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
  	<property name="userDetailsService" ref="userDetailsService"/>
  </bean>
 
  <bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <constructor-arg ref="sessionRegistry"/>
        <constructor-arg value="/"/>
  </bean>
    	
	<bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
        <constructor-arg ref="sessionRegistry"/>
        <property name="maximumSessions" value="-1"/>
  </bean>

	<!-- Maintains a registry of SessionInformation instances
    See: http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/session/SessionRegistry.html -->
 	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" /> 

 	<!-- Use a SHA encoder since the user's passwords are stored as SHAA in the database -->
 	<!--  
	<bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<constructor-arg value="x9ajDR$#Qkr91" />
  </bean>
	-->
</beans>